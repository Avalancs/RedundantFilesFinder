plugins {
    id 'java'
    id 'application'
}

group 'org.avalancs'
version '1.0'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '6.9.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    mainClass.set('org.avalancs.redundantfilesfinder.Main')
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8']
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
}

jar {
    archiveFileName.set('RedundantFilesFinder.jar')
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "skipped", "failed"]
        showStandardStreams = true
    }
}

ext {
    junitVersion = '5.7.1';
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.11.0'

    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

// extra files we want to include in the distribution
task createExtras {
    group = "distribution"
    inputs.property('version', version);
    outputs.dir("${buildDir}${File.separator}extras");

    doLast {
        File versionFile = new File("${buildDir}/extras/version.txt")
        versionFile.text = """Version: ${version}, git: ${getGitHash()}"""

        File readme = new File("${buildDir}/extras/readme.md");
        readme.text = project.file('readme.md').text.replace('@VERSION@', version).replace('@COMMIT_REF@', getGitHash())
    }
}

distributions {
    main {
        contents {
            from(tasks.createExtras.getOutputs().getFiles()) {
                into('/');
            }
            from(project.file('license.txt')) {
                into('/');
            }
            into('/') // do not create nested folder inside zip
        }
    }
}

tasks.named('distZip').configure {
    archiveFileName.set('RedundantFilesFinder.zip')
    dependsOn createExtras
}

tasks.named('distTar').configure {
    enabled(false)
}

String getGitHash() {
    def process =  'git rev-parse --short HEAD'.execute()
    process.waitFor()
    if(process.exitValue() == 0) {
        return process.text
    } else {
        logger.log(LogLevel.WARN, "Could not read git commit hash, will return empty string")
        return ""
    }
}